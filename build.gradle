import co.riiid.gradle.ReleaseTask
import com.install4j.gradle.Install4jTask
import groovy.json.JsonSlurper
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.Method
import groovyx.net.http.ParserRegistry
import de.undercouch.gradle.tasks.download.Download

buildscript {
  repositories {
    mavenCentral()
    maven {
      url 'http://maven.ej-technologies.com/repository'
    }
  }

  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
    classpath 'com.install4j:gradle-plugin:6.0'
  }
}

plugins {
  id "org.sonarqube" version "1.0"
  id "com.install4j.gradle" version "6.1.1"
  id "co.riiid.gradle" version "0.4.2"
  id "de.undercouch.download" version "3.1.2"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'distribution'


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = '0.6.31-alpha'

class HttpBuilder extends HTTPBuilder {

  public HttpBuilder(String url) {
    super(url)
    this.parser.'text/json' = { resp ->
      def bufferedText = resp.entity.content.getText(ParserRegistry.getCharset(resp)).trim()
      return new JsonSlurper().parseText(bufferedText)
    }
    this.parser.'application/json' = this.parser.'text/json'
  }
}

def httpRequest(Method method, String url, onSuccess) {
  def http = new HttpBuilder(url)

  http.request(method) {
    requestContentType = ContentType.JSON

    headers.'User-Agent' = 'downlords-faf-client-gradle'
    headers.'Authorization' = "token ${project.github.token}"
    headers.'Accept' = 'application/vnd.github.v3+json'

    response.success = onSuccess

    response.failure = { resp, json ->
      logger.debug 'Response headers: \n' + resp.headers.collect { "< $it" }.join('\n')
      def errorMessage = json ? json.message : resp.statusLine
      def ref = json ? "See $json.documentation_url" : ''
      def errorDetails = json && json.errors ? "Details: " + json.errors.collect { it }.join('\n') : ''
      throw new GradleScriptException("$errorMessage. $ref. $errorDetails", null)
    }
  }
}

def buildReleaseBody() {
  def GITHUB_BASE_URL = "https://api.github.com/repos/FAForever/downlords-faf-client"
  def versionString = "v" + project.version

  def milestones
  httpRequest(Method.GET, "${GITHUB_BASE_URL}/milestones?state=all", { resp, json ->
    milestones = json
  })

  if (milestones == null) throw new GradleException("Milestones could not be loaded")

  def milestoneNumber
  for (Object milestone : milestones) {
    if (versionString == milestone.title) {
      milestoneNumber = milestone.number
    }
  }

  if (milestoneNumber == null) throw new GradleException("No such milestone: " + versionString)

  def body = ""
  httpRequest(Method.GET, "${GITHUB_BASE_URL}/issues?state=closed&sort=created&direction=asc&milestone=${milestoneNumber}", { resp, json ->
    for (Object issue : json) {
      body += "* Fixed #${issue.number}: ${issue.title}\n"
    }
  })

  return body
}

def buildAssetList() {
  return file("build/install4j").list(new FilenameFilter() {
    @Override
    boolean accept(File dir, String name) {
      return name =~ /\.exe/
    }
  }).collect({ file -> "build/install4j/${file}" })
}

sonarqube {
  properties {
    property "sonar.host.url", "http://home.micheljung.ch/sonar"
    property "sonar.jdbc.url", "jdbc:mysql://home.micheljung.ch:3306/sonar"
    property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true
  }
}

idea {
  project {
    jdkName = JavaVersion.VERSION_1_8
    languageLevel = JavaVersion.VERSION_1_8
    vcs = 'Git'
  }
  module {
    downloadJavadoc = false
    downloadSources = true
  }
}

jar {
  manifest {
    attributes "Premain-Class": "com.faforever.client.fx.TransparentWebViewPatch",
        "Main-Class": "com.faforever.client.Main",
        "Implementation-Title": "Downlord's FAF Client",
        "Implementation-Version": version,
        "Implementation-Vendor": "Downlord"
  }
}

distributions {
  main {
    contents {
      from { [configurations.runtime, file('src/main/native'), jar] }
    }
  }
}

install4j {
  if (project.hasProperty('install4jHomeDir')) {
    installDir = file(install4jHomeDir)
  }
}

task buildInstaller(type: Install4jTask) {
  description 'Creates the application installer using Install4j'
  dependsOn 'clean'
  dependsOn 'jar'
  dependsOn 'installDist'

  projectFile = file('downlords-faf-client.install4j')
  release = version

  doFirst {
    if (!project.hasProperty('install4jHomeDir')) {
      throw new RuntimeException('Specify install4jHomeDir in gradle.properties and set it to an install4j installation directory')
    }
  }
}

task githubRelease(type: ReleaseTask, overwrite: true) {
  description 'Creates a new release on Github and closes the according milestone'
  dependsOn 'buildInstaller'

  doFirst {
    project.github {
      owner = 'FAForever'
      repo = 'downlords-faf-client'
      token = System.properties['githubAccessToken']
      tagName = "v" + project.version
      name = "v" + project.version
      prerelease = project.version =~ /alpha|beta|RC/
      body = buildReleaseBody()
      assets = buildAssetList()
    }
  }
}

task downloadIceAdapter(type: Download) {
  mustRunAfter 'assemble'
  src "https://github.com/FAForever/ice-adapter/releases/download/v${faf_ice_adapter_version}/faf-ice-adapter.exe"
  dest file("${buildDir}/resources/native/faf-ice-adapter.exe")
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.5'
}

repositories {
  mavenCentral()
  jcenter()
  maven { url "https://jitpack.io" }
}

jacoco {
  toolVersion = "0.7.5.201505241946"
}

dependencies {
  testCompile 'junit:junit:4.11'
  testCompile 'org.hamcrest:hamcrest-integration:1.3'
  testCompile 'org.mockito:mockito-core:2.0.31-beta'
  testCompile("org.testfx:testfx-core:4.0.+") {
    exclude module: 'guava'
  }
  testCompile "org.testfx:testfx-junit:4.0.+"
  testCompile "nl.jqno.equalsverifier:equalsverifier:1.7.3"
  testCompile 'org.springframework:spring-test:4.2.2.RELEASE'
  testCompile 'com.natpryce.hamcrest:hamcrest-reflection:0.1-2'

  compile 'com.google.code.gson:gson:2.3.1'
  compile 'org.springframework:spring-beans:4.2.2.RELEASE'
  compile 'org.springframework:spring-context:4.2.2.RELEASE'
  compile 'org.springframework:spring-context-support:4.2.2.RELEASE'
  compile 'org.springframework:spring-core:4.2.2.RELEASE'
  compile 'org.springframework:spring-web:4.2.2.RELEASE'
  compile('org.pircbotx:pircbotx:2.1') {
    exclude module: 'guava'
  }
  compile 'com.google.guava:guava:18.0'
  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.2'
  compile 'org.apache.commons:commons-compress:1.9'
  compile 'org.apache.httpcomponents:httpclient:4.4.1'
  compile 'net.java.dev.jna:jna:4.1.0'
  compile 'net.java.dev.jna:jna-platform:4.1.0'
  compile 'org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r'
  compile 'org.jetbrains:annotations:13.0'
  compile 'net.sf.jtidy:jtidy:r938'
  compile 'com.neovisionaries:nv-i18n:1.15'
  compile 'org.slf4j:jul-to-slf4j:1.7.12'
  compile 'com.rometools:rome:1.5.0'
  compile 'org.jsoup:jsoup:1.8.2'
  compile 'com.google.oauth-client:google-oauth-client-java7:1.16.0-rc'
  compile 'com.google.http-client:google-http-client-gson:1.20.0'
  compile 'org.apache.lucene:lucene-core:5.3.1'
  compile 'org.apache.lucene:lucene-analyzers-common:5.3.1'
  compile 'org.apache.lucene:lucene-suggest:5.3.1'
  compile 'com.nativelibs4java:bridj:0.7.0'
  compile 'com.github.nocatch:nocatch:1.1'
  compile 'org.javassist:javassist:3.20.0-GA'
  compile 'org.luaj:luaj-jse:3.0.1'
  compile 'commons-validator:commons-validator:1.5.1'
  compile 'com.github.micheljung:JJsonRpc:f683b55f55'
  compile 'javax.inject:javax.inject:1'
  compile 'com.github.jasminb:jsonapi-converter:0.6'
  compile 'org.projectlombok:lombok:1.16.12'
}
